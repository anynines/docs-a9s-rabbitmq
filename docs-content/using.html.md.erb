# Using a9s RabbitMQ

This topic describes how developers use a9s RabbitMQ.

##  <a id='use-a9s-rabbimq-with-an-application'></a> Use a9s RabbitMQ with an App

To use a9s RabbitMQ with an application, create a service instance and bind the service instance to your app. For more information about managing service instances, see [Managing Service Instances with the cf CLI](https://docs.cloudfoundry.org/devguide/services/managing-services.html).

### <a id='view-the-a9s-rabqitmw-service'></a> View the a9s RabbitMQ Service

After the tile is installed, you can see the `a9s-rabbitmq` and its service plans appear in your PCF marketplace. Run `cf marketplace` to see the service listing:
```bash
$ cf marketplace
Getting services from marketplace in org test / space test as admin...
OK
service         plans                                             description
a9s-rabbitmq36  rabbitmq-single-small, rabbitmq-cluster-small,    This is the anynines rabbitmq 36 service.
                rabbitmq-single-big, rabbitmq-cluster-big
```

### <a id='create-a-service-instance'></a> Create a Service Instance

To provision a RabbitMQ database, run `cf create-service`. For example:

```bash
$ cf create-service a9s-rabbitmq36 rabbitmq-single-small my-rabbitmq-service
```

Depending on your infrastructure and service broker utilization, it might take several minutes to create the service instance.

Run `cf services` to view the creation status. This command displays a list of all your service instances. To view the status of a specific service instance, run `cf service NAME-OF-YOUR-SERVICE`.
### <a id='bind-an-application-to-a-service-instance'></a> Bind an Application to a Service Instance

After your database is created, run `cf bind-service` to bind the service to your application:

```bash
$ cf bind-service a9s-rabbitmq-app my-rabbitmq-service
```

### <a id='restage-or-restart-your-application'></a> Restage or Restart Your Application

To enable your appliation to access the service instance, run `cf restage` or `cf restart` to restage or restart your app.

### <a id='obtain-service-instance-access-credentials'></a> Obtain Service Instance Access Credentials

After a service instance is bound to an application, the credentials of your RabbitMQ database are stored in the environment variables of the application. Run `cf env APP-NAME` to display the environment variables.

You can find the credentials in the [VCAP_SERVICES](https://docs.cloudfoundry.org/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES) key.

```bash
$ cf env a9s-rabbitmq-app
Getting env variables for app a9s-rabbitmq-app in org test / space test as admin...
OK

System-Provided:
{
  "VCAP_SERVICES": {
    "a9s-rabbitmq36": [
    {
      "credentials": {
        "dns_servers": [
          "172.28.10.20",
          "172.28.11.30",
          "172.28.12.23"
        ],
        "host": "d87e464.service.dc1.a9s-rabbitmq-consul",
        "host_ip": "172.28.25.12",
        "host_ips": [
          "172.28.25.12",
          "172.28.26.11",
          "172.28.27.12"
        ],
        "hosts": [
          "d87e464-mq-0.node.dc1.a9s-rabbitmq-consul",
          "d87e464-mq-1.node.dc1.a9s-rabbitmq-consul",
          "d87e464-mq-2.node.dc1.a9s-rabbitmq-consul"
        ],
        "password": "a9s-pwd",
        "port": 5672,
        "uri": "amqps://a9s-brk-usr:a9s-pwd@d87e464.service.dc1.a9s-rabbitmq-consul:5672",
        "username": "a9s-brk-usr"
      },
      "label": "a9s-rabbitmq36",
      "name": "2452-23360-25011-17366",
      "plan": "rabbitmq-replica-small-ssl",
      "provider": null,
      "syslog_drain_url": null,
      "tags": [
        "messaging",
        "queue"
      ],
      "volume_mounts": []
    }
    ]
  }
}
...
```

You can use the host, username and password values to connect to your database with a RabbitMQ client.

## <a id='delete-an-a9s-redis-service-instance'></a> Delete an a9s Redis Service Instance

<p class='note warning'><strong>WARNING:</strong> Before deleting a service instance, you must back up data stored in your database. This operation cannot be undone and all the data is lost when the service is deleted.</p>

Before you can delete a service instance, you must unbind it from all apps.

### <a id='list-available-services'></a> List Available Services

Run `cf services` to list your available services.

```bash
$ cf services

Getting services in org test / space test as admin...
OK

name                  service          plan                    bound apps         last operation
my-rabbitmq-service   a9s-rabbitmq36   rabbitmq-single-small   a9s-rabbitmq-app   create succeeded
```

This example shows that `my-rabbitmq-service` is bound to the `a9s-rabbitmq-app` application.

### <a id='unbind-a-service-instance'></a> Unbind a Service Instance

Run `cf unbind-service` to unbind the service instance from your app.

```bash
$ cf unbind-service a9s-rabbitmq-app my-rabbitmq-service
```


### <a id='delete-a-service-instance'></a> Delete a Service Instance

After unbinding the service, it is no longer bound to an application. Run `cf delete-service` to delete the service:

```bash
$ cf delete-service my-rabbitmq-service
```

It may take several minutes to delete the service. Deleting a service deprovisions the corresponding infrastructure resources.
Run the `cf services` command to view the deletion status.

## <a id='upgrade-the-service-instance-to-another-service-plan'></a> Upgrade the Service Instance to Another Service Plan

Once created, you can upgrade your service instance to another, larger service plan. A larger service plan provides more CPU, RAM and storage. For more information, see the  [Update a Service Instance](https://docs.cloudfoundry.org/devguide/services/managing-services.html#update_service) of the _Managing Service Instances with the cf CLI_ topic.

```bash
$ cf update-service my-rabbitmq-service -p a-bigger-plan
```

Here are the plans you can upgrade to depending on the one you are currently
using:

| Base Plan | Target Plan |
|------|-----------|
| rabbitmq-single-nano | rabbitmq-single-small <br> rabbitmq-single-medium <br> rabbitmq-single-big <br> rabbitmq-replica-small <br> rabbitmq-replica-medium <br> rabbitmq-replica-big |
| rabbitmq-single-small | rabbitmq-single-medium <br> rabbitmq-single-big <br> rabbitmq-replica-small <br> rabbitmq-replica-medium <br> rabbitmq-replica-big |
| rabbitmq-single-medium | rabbitmq-single-big <br> rabbitmq-replica-medium <br> rabbitmq-replica-big |
| rabbitmq-single-big | rabbitmq-replica-big |
| rabbitmq-replica-small | rabbitmq-replica-medium <br> rabbitmq-replica-big |
| rabbitmq-replica-medium | rabbitmq-replica-big |
| rabbitmq-single-nano-ssl | rabbitmq-single-small-ssl <br> rabbitmq-single-medium-ssl <br> rabbitmq-single-big-ssl <br> rabbitmq-replica-small-ssl <br> rabbitmq-replica-medium-ssl <br> rabbitmq-replica-big-ssl |
| rabbitmq-single-small-ssl | rabbitmq-single-medium-ssl <br> rabbitmq-single-big-ssl <br> rabbitmq-replica-small-ssl <br> rabbitmq-replica-medium-ssl <br> rabbitmq-replica-big-ssl |
| rabbitmq-single-medium-ssl | rabbitmq-single-big-ssl <br> rabbitmq-replica-medium-ssl <br> rabbitmq-replica-big-ssl |
| rabbitmq-single-big-ssl | rabbitmq-replica-big-ssl |
| rabbitmq-replica-small-ssl | rabbitmq-replica-medium-ssl <br> rabbitmq-replica-big-ssl |
| rabbitmq-replica-medium-ssl | rabbitmq-replica-big-ssl |

## <a id='add-a-graphite-endpoint'></a> Add a Graphite Endpoint

If you want to monitor your service with Graphite, you can set an endpoint to where to information will be sent with the `cf update-service` command. This command expects the [-c flag](https://docs.cloudfoundry.org/devguide/services/managing-services.html#arbitrary-params-binding) and a JSON string containing the `graphite` and `metrics_prefix` keys.
Depending on your graphite provider, the `metrics_prefix` might require that each metric must start with an API key in their name. You can also change the interval within the data is send to the endpoint. To do this, modify `interval`; the default is 10s.

```bash
$ cf update-service my-rabbitmq-service -c '{ "graphite": ["yourspace.your-graphite-endpoint.com:12345"], "metrics_prefix": "your-api-key.my-cluster-rabbitmq", "interval": "5"}'
```

## <a id='add-a-syslog-endpoint'></a> Add a Syslog Endpoint

The `cf update-service` command used with the [-c flag](https://docs.cloudfoundry.org/devguide/services/managing-services.html#arbitrary-params-binding) can let you stream your syslog to a third-party service. In this case, the command expects a JSON string containing the `syslog` key. You can also change the interval for the syslog with the same key than for the graphite endpoint `interval`.

```bash
$ cf update-service my-rabbitmq-service -c '{ "syslog": ["logs4.your-syslog-endpoint.com:54321"], "interval": "5" }'
```

## <a id='cloud-foundry-application-security-groups'></a> Cloud Foundry Application Security Groups

This topic describes how to check whether a security group was created.

Each a9s Data Service will automatically create and update Cloud Foundry security groups in order to protect service instances to be accessed by applications not running in the same Cloud Foundry applications space.
To understand Security Groups, see [Understanding Application Security Groups](https://docs.cloudfoundry.org/concepts/asg.html).

### <a id='get-service-instance-guid'></a> Get Service Instance GUID

Run `cf service INSTANCE_NAME --guid` to get the guid of the service instance.

```bash
$ cf service my-rabbitmq --guid
ca16f111-5073-40b7-973a-156c75dd3028
```

### <a id='check-available-security-groups'></a> Check available Security Groups

To see all available security groups, run `cf security-groups`.

```
$cf security-groups
Getting security groups as demo@anynines.com
OK

     Name                                         Organization     Space
#0   public_networks
#1   dns
#2   tcp_open
#3   guard_432fb752-876d-443b-a311-a075f4df2237   demonstrations   demo
#4   guard_ca16f111-5073-40b7-973a-156c75dd3028   demonstrations   demo
```

There we can see a security group with the name `guard_ca16f111-5073-40b7-973a-156c75dd3028`
was successfully created.

<p class='note'><strong>Note:</strong> In some circumstances, the connection between the application and the service instance is not possible. In this case, check to see if a security group was created.</p>


## <a id='backup-and-restore-service-instances'></a> Back Up and Restore Service Instances

a9s RabbitMQ provides an easy way to create backups and restore if needed.

### <a id='get-dashboard-address-login-and-authorize'></a> Get Dashboard Address, Log In, and Authorize

1. Grap the dashboard URL with `cf service SERVICE-NAME`.
  ```bash
  $cf service my-rabbitmq

  Service instance: my-rabbitmq
  Service: a9s-rabbitmq
  Bound apps:
  Tags:
  Plan: rabbitmq-single-small
  Description: This is a service creating and managing dedicated RabbitMQ service instances and clusters, powered by the anynines Service Framework
  Documentation url:
  Dashboard: https://a9s-rabbitmq-dashboard.aws.ie.a9s.eu/service-instances/ca16f111-5073-40b7-973a-156c75dd3028

  Last Operation
  Status: update succeeded
  Message:
  Started: 2017-10-26T08:28:38Z
  Updated: 2017-10-26T08:28:38Z
  ```

1. Browse to the dashboard URL and authenticate on the redirected page with your Cloud Foundry credentials:
![authentication-page](images/authentication-page.png)

1. Click **Authorize** to approve the authorization request:
![authorization-page](images/authorization-page.png)

### <a id='perform-a-backup'></a> Perform a Backup

On the dashboard, above you can trigger a backup by clicking **Trigger backup**

![service-dashboard](images/service-dashboard.png)

After a short period of time the backup will be queued the backup process will soon start.

![service-dashboard](images/service-dashboard-bkp-triggered.png)

<p class='note'><strong>Note:</strong> Depending on the size of the data, the backup will take some time.</p>

### <a id='restore-a-backup'></a> Restore a Backup

1. Open the dashboard again and select the backup you would like to restore.
Click the **Restore** button of the backup. After a short period of time the restore will be triggered.

![service-dashboard](images/service-dashboard-restore-triggered.png)

*NOTE: Same as the backup, depending on the size of the data, the restore will take some time.*

![service-dashboard](images/service-dashboard-final.png)

## <a id='use-rabbitmq-plugins'></a> Use RabbitMQ Plugins

a9s RabbitMQ allows to enable the following RabbitMQ plugins:

* rabbitmq_consistent_hash_exchange
* rabbitmq_federation
* rabbitmq_federation_management
* rabbitmq_mqtt
* rabbitmq_sharding
* rabbitmq_shovel
* rabbitmq_shovel_management
* rabbitmq_stomp
* rabbitmq_tracing

### <a id='installation'></a> Installation

You can install RabbitMQ plugins with the `cf create-service` and
`cf update-service` commands using additional configuration parameters.

```shell
$ cf create-service a9s-rabbitmq36 rabbitmq-single-small my-rabbitmq-service -c '{ "plugins": ["rabbitmq_shovel", "rabbitmq_shovel_management"] }'
$ cf update-service my-rabbitmq-service -c '{ "plugins": ["rabbitmq_shovel", "rabbitmq_shovel_management"] }'
```

## <a id='create-rabbitmq-users'></a> Create RabbitMQ Users

a9s RabbitMQ allows to create new users with different roles (permissions) by creating
[service keys](https://docs.cloudfoundry.org/devguide/services/service-keys.html).

The possible roles are:
* management
* policymaker
* monitoring
* administrator

You can read more about RabbitMQ roles and permissions [here](https://www.rabbitmq.com/management.html#permissions).

### <a id='create-a-new-role'></a> Create a New Role

You can create a new user with specific permissions (roles) giving the `role` following custom parameter.
This parameter receives an array of roles:

```shell
$ cf create-service-key my-rabbitmq-service my-key -c '{"roles": ["administrator", "management"]}'
```

## <a id='use-rabbitmq-management-dashboard'></a> Use RabbitMQ Management Dashboard

a9s RabbitMQ has management dashboard support enabled. The dashboard is running on
the service instance VM so it is not possible to open the dashboard in your browser directly.
CF provides a smart way to create SSH forward tunnels via a pushed application.
For more information about this feature see the [Accessing Apps with SSH](https://docs.cloudfoundry.org/devguide/deploy-apps/ssh-apps.html) section of the CF documentation.

First of all you must have an application bound to the service. How to do this see [Bind an Application to a Service Instance](#bind-an-application-to-a-service-instance).

<p class='note'><strong>Note:</strong> `cf ssh` support must be enabled in the platform. Ask your administrator if you are not sure.</p>

### <a id='get-dashboard-url-and-credentials'></a> Get Dashboard Url and Credentials

When you follow this instructions [Obtain Service Instance Access Credentials](#obtain-service-instance-access-credentials) you will get the hostname of the service and the user credentials.

```bash
$ cf env rabbitmq-app
Getting env variables for app rabbitmq-app in org phartz / space develop as admin...
OK

System-Provided:
{
  "VCAP_SERVICES": {
    "a9s-rabbitmq36": [
    {
      "credentials": {
        "dns_servers": [
          "172.28.10.20",
          "172.28.11.30",
          "172.28.12.23"
        ],
        "host": "d87e464.service.dc1.a9s-rabbitmq-consul",
        "host_ip": "172.28.25.12",
        "host_ips": [
          "172.28.25.12",
          "172.28.26.11",
          "172.28.27.12"
        ],
        "hosts": [
          "d87e464-mq-0.node.dc1.a9s-rabbitmq-consul",
          "d87e464-mq-1.node.dc1.a9s-rabbitmq-consul",
          "d87e464-mq-2.node.dc1.a9s-rabbitmq-consul"
        ],
        "password": "a9s-pwd",
        "port": 5672,
        "uri": "amqps://a9s-brk-usr:a9s-pwd@d87e464.service.dc1.a9s-rabbitmq-consul:5672",
        "username": "a9s-brk-usr"
      },
      "label": "a9s-rabbitmq36",
      "name": "2452-23360-25011-17366",
      "plan": "rabbitmq-replica-small-ssl",
      "provider": null,
      "syslog_drain_url": null,
      "tags": [
        "messaging",
        "queue"
      ],
      "volume_mounts": []
    }
    ]
  }
}
```

Notice the host `d67901c.service.dc1.a9svs`, the username `a9s-brk-usr` and the password `a9s-password`. You will need this in the next step.

### <a id='create-tunnel-to-the-management-dashboard'></a> Create Tunnel to The Management Dashboard

With the `cf ssh` as mentioned before you can create a ssh forward tunnel to the management dashboard.

```bash
$ cf ssh rabbitmq-app -L 15672:d67901c.service.dc1.a9svs:15672
vcap@956aaf4e-6da9-4f69-4b1d-8e631a403312:~$
```
*NOTE: Don't forget to close the session with `exit`.*

### <a id='log-in-to-the-management-dashboard'></a> Log In to The Management Dashboard

When the ssh tunnel is open you can access the Dashboard with your Browser at [http://localhost:15672](http://localhost:15672).

To login to the management dashboard you need the user credentials.
![management-dashboard-login](images/management-dashboard-login.png)

If the login was successful, you should see the dashboard as followed.
![management-dashboard](images/management-dashboard.png)

## <a id='make-a-service-instance-locally-available'></a> Make a Service Instance Locally Available

t is possible to access any of the a9s Data Services locally. You can connect with a local client to the service for any purpose, such as debugging.
CF provides a smart way to create SSH forward tunnels through a pushed application.+For more information about this feature, see the [Accessing Apps with SSH](https://docs.cloudfoundry.org/devguide/deploy-apps/ssh-apps.html) section of the CF documentation.

First, you must have an application bound to the service. To do this, see [Bind an Application to a Service Instance](#bind-an-application-to-a-service-instance).

<p class='note'><strong>Note:</strong> `cf ssh` support must be enabled in the platform. Your administrator can tell you whether it is enabled.</p>

### <a id='get-the-service-url-and-credentials'></a> Get The Service Url and Credentials

When you follow this instructions [Obtain Service Instance Access Credentials](#obtain-service-instance-access-credentials) you will get the hostname of the service and the user credentials.

```bash
$ cf env a9s-rabbitmq-app
Getting env variables for app a9s-rabbitmq-app in org test / space test as admin...
OK

System-Provided:
{
  "VCAP_SERVICES": {
   "a9s-rabbitmq": [
    {
      "credentials": {
       "host": [
        "d67901c.service.dc1.a9svs"
       ],
       "password": "a9s-brk-usr",
       "username": "a9s-password"
     },
     "label": "a9s-rabbitmq",
     "name": "my-rabbitmq-service",
     "plan": "rabbitmq-cluster-small"
    }
   ]
  }
}
...
```

Notice the host `d67901c.service.dc1.a9svs`, the username `a9s-brk-usr` and the password `a9s-password`. You will need this in the next step.

### <a id='create-a-tunnel-to-the-service'></a> Create a Tunnel to The Service

With `cf ssh`,  you can create am SSH forward tunnel to the management dashboard.
Use port `9200` to connect to the a9s RabbitMQ Instance.

```bash
$ cf ssh a9s-rabbitmq-app -L 9200:d67901c.service.dc1.a9svs:9200
vcap@956aaf4e-6da9-4f69-4b1d-8e631a403312:~$
```

When the SSH tunnel is open, you can access the instance using the address `localhost:9200`.

<p class='note'><strong>Note:</strong> Be sure to close the session by running <code>exit</code>.</p>

## <a id='create-a-fork-of-a-service-instance'></a> Create a fork of a service instance

The procedure of forking a service instance involves creating a backup of a service instance and restoring it to a different service instance.

Having two service instances is a prerequisite for the process:
```shell
$ cf s
Getting services in org jebreuer_anynines_com / space test as jebreuer@anynines.com...

name      service          plan                     bound apps   last operation
rabbit1   a9s-rabbitmq37   rabbitmq-cluster-small   bindingo     create succeeded
rabbit2   a9s-rabbitmq37   rabbitmq-cluster-small                create succeeded
```

Additional prerequisites regarding command line tools:
- BASH (some shell)
- cat
- openssl
- python (see below for the verion required)
- node (tested with v6.11.0)

Open the service dashboard of the service instance you want to fork. We use `rabbit1` for this example. You can find the dashboard URL like this:
```shell
$ cf service rabbit1
Showing info of service rabbit1 in org jebreuer_anynines_com / space test as jebreuer@anynines.com...

name:            rabbit1
service:         a9s-rabbitmq37
bound apps:      bindingo
tags:
plan:            rabbitmq-cluster-small
description:     This is a service creating and managing dedicated RabbitMQ service instances, powered by the anynines Service Framework
documentation:
dashboard:       https://a9s-rabbitmq-dashboard.de.a9s.eu/service-instances/950cb675-3ed9-4613-8bb6-b2d618391d2f

[...]
```

Make sure you set a encryption password for the backups using the service instance dashboard (`Change Backup Settings`). Create a backup using the dashboard. Download the backup to your local machine. The filename will be something like `racsd92baee-1522222422893`.
Decrypt the backup and write its contents to a file:
```shell
$ cat racsd92baee-1522222422893 | openssl enc -aes256 -d -pass 'pass:mytopsecretpassword' > backup_settings.json
```

Create a tunnel to the admin interface (like explained in a previous chapter) of the rabbitmq instance that will be the fork of the original instance. I used rabbit1 as the original instance and rabbit2 as the fork instance. The tunnel is needed to get the matching version of the rabbitmqadmin script as well as to restore the backed up data.
I assume you're using something like this to set up the tunnel:
```shell
$ cf ssh someapp -L 127.0.0.1:15672:racsd92baee.service.dc1.a9ssvc:15672
```
`racsd92baee.service.dc1.a9ssvc` is the host of the rabbit2 service instance.

Go to [http://127.0.0.1:15672/cli/](http://127.0.0.1:15672/cli/) to download the `rabbitmqadmin` tool. `rabbitmqadmin` is a python script. On that page you'll find information about the python version required.

Download a copy of the backup script [restore_queues.js](./restore_queues.js). Make sure to `chmod u+x` the script.

Restore the backed up queues using the restore script, e.g.:
```shell
./restore_queues.js $(which python) ~/Downloads/rabbitmqadmin 127.0.0.1 15672 a9s-brk-usr-xxxxxxxx xxxxxxxyyyyyyyyyzzzzzzzzz ./backup_settings.json
```
